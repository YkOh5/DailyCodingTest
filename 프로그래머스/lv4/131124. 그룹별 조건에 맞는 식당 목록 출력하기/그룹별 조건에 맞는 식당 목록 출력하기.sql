# ID별 작성한 Review의 최대 개수를 선택 -> 해당 개수만큼 Review를 작성한 ID들을 선택 -> 해당 ID들의 Review 정보를 선택
# 언뜻보면 난해하지만, 순서대로 한 단계씩 해결하면 그리 어렵지 않다!
SELECT MEMBER_NAME, REVIEW_TEXT, DATE_FORMAT(REVIEW_DATE, '%Y-%m-%d') AS REVIEW_DATE
FROM MEMBER_PROFILE AS T1
    JOIN REST_REVIEW AS T2
        ON T1.MEMBER_ID = T2.MEMBER_ID
WHERE T1.MEMBER_ID IN (
    SELECT MEMBER_ID
    FROM REST_REVIEW
    GROUP BY MEMBER_ID
    HAVING COUNT(REVIEW_ID) = (
        SELECT MAX(CNT) 
        FROM (SELECT COUNT(*) AS CNT
              FROM REST_REVIEW 
              GROUP BY MEMBER_ID) AS CNTS
        )
    )
ORDER BY REVIEW_DATE ASC, REVIEW_TEXT ASC;


# 작성한 Review 개수의 최대값을 구하는 서브쿼리(Sub-Query)를 달리 할 수 있다
# SELECT T1.MEMBER_NAME, T2.REVIEW_TEXT, DATE_FORMAT(T2.REVIEW_DATE, '%Y-%m-%d') AS REVIEW_DATE
# FROM MEMBER_PROFILE AS T1
#     JOIN REST_REVIEW AS T2
#         ON T1.MEMBER_ID = T2.MEMBER_ID
# WHERE T1.MEMBER_ID IN (
#     SELECT MEMBER_ID
#     FROM REST_REVIEW
#     GROUP BY MEMBER_ID
#     HAVING COUNT(*) = (
#         SELECT COUNT(*)
#         FROM REST_REVIEW
#         GROUP BY MEMBER_ID
#         ORDER BY COUNT(*) DESC
#         LIMIT 1
#         )
#     )
# ORDER BY T2.REVIEW_DATE ASC, T2.REVIEW_TEXT ASC;


# 이런 식의 서브쿼리(Sub-Query)는 ID별 Review의 최대 개수만큼 작성한 ID가 여럿일 때는 적용될 수 없다
# SELECT MEMBER_NAME, REVIEW_TEXT, DATE_FORMAT(REVIEW_DATE, '%Y-%m-%d') AS REVIEW_DATE
# FROM MEMBER_PROFILE AS T1
#     JOIN REST_REVIEW AS T2
#         ON T1.MEMBER_ID = T2.MEMBER_ID
# WHERE T1.MEMBER_ID = (
#     SELECT MEMBER_ID
#     FROM REST_REVIEW
#     GROUP BY MEMBER_ID
#     ORDER BY COUNT(REVIEW_ID) DESC
#     LIMIT 1
#     )
# ORDER BY REVIEW_DATE ASC, REVIEW_TEXT ASC;